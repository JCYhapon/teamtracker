{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst sha3_1 = require(\"@noble/hashes/sha3\");\n/**\n * Keccak256 hash\n * @param data The data\n */\nfunction keccak256(data) {\n  return bytesToHex(sha3_1.keccak_256(toByteArray(data)));\n}\nexports.keccak256 = keccak256;\n/**\n * Adding padding to string on the left\n * @param value The value\n * @param chars The chars\n */\nexports.padLeft = (value, chars) => {\n  const hasPrefix = /^0x/i.test(value) || typeof value === 'number';\n  value = value.toString().replace(/^0x/i, '');\n  const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + new Array(padding).join('0') + value;\n};\n/**\n * Convert bytes to hex\n * @param bytes The bytes\n */\nfunction bytesToHex(bytes) {\n  const hex = [];\n  for (let i = 0; i < bytes.length; i++) {\n    hex.push((bytes[i] >>> 4).toString(16));\n    hex.push((bytes[i] & 0xf).toString(16));\n  }\n  return \"0x\".concat(hex.join('').replace(/^0+/, ''));\n}\nexports.bytesToHex = bytesToHex;\n/**\n * To byte array\n * @param value The value\n */\nfunction toByteArray(value) {\n  if (value == null) {\n    throw new Error('cannot convert null value to array');\n  }\n  if (typeof value === 'string') {\n    const match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n    if (!match) {\n      throw new Error('invalid hexidecimal string');\n    }\n    if (match[1] !== '0x') {\n      throw new Error('hex string must have 0x prefix');\n    }\n    value = value.substring(2);\n    if (value.length % 2) {\n      value = '0' + value;\n    }\n    const result = [];\n    for (let i = 0; i < value.length; i += 2) {\n      result.push(parseInt(value.substr(i, 2), 16));\n    }\n    return addSlice(new Uint8Array(result));\n  }\n  if (isByteArray(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n  throw new Error('invalid arrayify value');\n}\nexports.toByteArray = toByteArray;\n/**\n * Is byte array\n * @param value The value\n */\nfunction isByteArray(value) {\n  if (!value ||\n  // tslint:disable-next-line: radix\n  parseInt(String(value.length)) != value.length || typeof value === 'string') {\n    return false;\n  }\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n    // tslint:disable-next-line: radix\n    if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Add slice to array\n * @param array The array\n */\nfunction addSlice(array) {\n  if (array.slice !== undefined) {\n    return array;\n  }\n  array.slice = () => {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n  return array;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","sha3_1","require","keccak256","data","bytesToHex","keccak_256","toByteArray","padLeft","chars","hasPrefix","test","toString","replace","padding","length","Array","join","bytes","hex","i","push","concat","Error","match","substring","result","parseInt","substr","addSlice","Uint8Array","isByteArray","String","v","array","slice","undefined","args","prototype","call","arguments","apply"],"sources":["E:/4th Year/2nd Semester/BlockChain/starter-files/node_modules/ethereum-bloom-filters/dist/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sha3_1 = require(\"@noble/hashes/sha3\");\n/**\n * Keccak256 hash\n * @param data The data\n */\nfunction keccak256(data) {\n    return bytesToHex(sha3_1.keccak_256(toByteArray(data)));\n}\nexports.keccak256 = keccak256;\n/**\n * Adding padding to string on the left\n * @param value The value\n * @param chars The chars\n */\nexports.padLeft = (value, chars) => {\n    const hasPrefix = /^0x/i.test(value) || typeof value === 'number';\n    value = value.toString().replace(/^0x/i, '');\n    const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;\n    return (hasPrefix ? '0x' : '') + new Array(padding).join('0') + value;\n};\n/**\n * Convert bytes to hex\n * @param bytes The bytes\n */\nfunction bytesToHex(bytes) {\n    const hex = [];\n    for (let i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xf).toString(16));\n    }\n    return `0x${hex.join('').replace(/^0+/, '')}`;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * To byte array\n * @param value The value\n */\nfunction toByteArray(value) {\n    if (value == null) {\n        throw new Error('cannot convert null value to array');\n    }\n    if (typeof value === 'string') {\n        const match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n        if (!match) {\n            throw new Error('invalid hexidecimal string');\n        }\n        if (match[1] !== '0x') {\n            throw new Error('hex string must have 0x prefix');\n        }\n        value = value.substring(2);\n        if (value.length % 2) {\n            value = '0' + value;\n        }\n        const result = [];\n        for (let i = 0; i < value.length; i += 2) {\n            result.push(parseInt(value.substr(i, 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isByteArray(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    throw new Error('invalid arrayify value');\n}\nexports.toByteArray = toByteArray;\n/**\n * Is byte array\n * @param value The value\n */\nfunction isByteArray(value) {\n    if (!value ||\n        // tslint:disable-next-line: radix\n        parseInt(String(value.length)) != value.length ||\n        typeof value === 'string') {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        // tslint:disable-next-line: radix\n        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Add slice to array\n * @param array The array\n */\nfunction addSlice(array) {\n    if (array.slice !== undefined) {\n        return array;\n    }\n    array.slice = () => {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,MAAM,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC5C;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,IAAI,EAAE;EACrB,OAAOC,UAAU,CAACJ,MAAM,CAACK,UAAU,CAACC,WAAW,CAACH,IAAI,CAAC,CAAC,CAAC;AAC3D;AACAL,OAAO,CAACI,SAAS,GAAGA,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACAJ,OAAO,CAACS,OAAO,GAAG,CAACR,KAAK,EAAES,KAAK,KAAK;EAChC,MAAMC,SAAS,GAAG,MAAM,CAACC,IAAI,CAACX,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ;EACjEA,KAAK,GAAGA,KAAK,CAACY,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EAC5C,MAAMC,OAAO,GAAGL,KAAK,GAAGT,KAAK,CAACe,MAAM,GAAG,CAAC,IAAI,CAAC,GAAGN,KAAK,GAAGT,KAAK,CAACe,MAAM,GAAG,CAAC,GAAG,CAAC;EAC5E,OAAO,CAACL,SAAS,GAAG,IAAI,GAAG,EAAE,IAAI,IAAIM,KAAK,CAACF,OAAO,CAAC,CAACG,IAAI,CAAC,GAAG,CAAC,GAAGjB,KAAK;AACzE,CAAC;AACD;AACA;AACA;AACA;AACA,SAASK,UAAUA,CAACa,KAAK,EAAE;EACvB,MAAMC,GAAG,GAAG,EAAE;EACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACH,MAAM,EAAEK,CAAC,EAAE,EAAE;IACnCD,GAAG,CAACE,IAAI,CAAC,CAACH,KAAK,CAACE,CAAC,CAAC,KAAK,CAAC,EAAER,QAAQ,CAAC,EAAE,CAAC,CAAC;IACvCO,GAAG,CAACE,IAAI,CAAC,CAACH,KAAK,CAACE,CAAC,CAAC,GAAG,GAAG,EAAER,QAAQ,CAAC,EAAE,CAAC,CAAC;EAC3C;EACA,YAAAU,MAAA,CAAYH,GAAG,CAACF,IAAI,CAAC,EAAE,CAAC,CAACJ,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;AAC/C;AACAd,OAAO,CAACM,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA;AACA,SAASE,WAAWA,CAACP,KAAK,EAAE;EACxB,IAAIA,KAAK,IAAI,IAAI,EAAE;IACf,MAAM,IAAIuB,KAAK,CAAC,oCAAoC,CAAC;EACzD;EACA,IAAI,OAAOvB,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAMwB,KAAK,GAAGxB,KAAK,CAACwB,KAAK,CAAC,qBAAqB,CAAC;IAChD,IAAI,CAACA,KAAK,EAAE;MACR,MAAM,IAAID,KAAK,CAAC,4BAA4B,CAAC;IACjD;IACA,IAAIC,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;MACnB,MAAM,IAAID,KAAK,CAAC,gCAAgC,CAAC;IACrD;IACAvB,KAAK,GAAGA,KAAK,CAACyB,SAAS,CAAC,CAAC,CAAC;IAC1B,IAAIzB,KAAK,CAACe,MAAM,GAAG,CAAC,EAAE;MAClBf,KAAK,GAAG,GAAG,GAAGA,KAAK;IACvB;IACA,MAAM0B,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,KAAK,CAACe,MAAM,EAAEK,CAAC,IAAI,CAAC,EAAE;MACtCM,MAAM,CAACL,IAAI,CAACM,QAAQ,CAAC3B,KAAK,CAAC4B,MAAM,CAACR,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACjD;IACA,OAAOS,QAAQ,CAAC,IAAIC,UAAU,CAACJ,MAAM,CAAC,CAAC;EAC3C;EACA,IAAIK,WAAW,CAAC/B,KAAK,CAAC,EAAE;IACpB,OAAO6B,QAAQ,CAAC,IAAIC,UAAU,CAAC9B,KAAK,CAAC,CAAC;EAC1C;EACA,MAAM,IAAIuB,KAAK,CAAC,wBAAwB,CAAC;AAC7C;AACAxB,OAAO,CAACQ,WAAW,GAAGA,WAAW;AACjC;AACA;AACA;AACA;AACA,SAASwB,WAAWA,CAAC/B,KAAK,EAAE;EACxB,IAAI,CAACA,KAAK;EACN;EACA2B,QAAQ,CAACK,MAAM,CAAChC,KAAK,CAACe,MAAM,CAAC,CAAC,IAAIf,KAAK,CAACe,MAAM,IAC9C,OAAOf,KAAK,KAAK,QAAQ,EAAE;IAC3B,OAAO,KAAK;EAChB;EACA,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,KAAK,CAACe,MAAM,EAAEK,CAAC,EAAE,EAAE;IACnC,MAAMa,CAAC,GAAGjC,KAAK,CAACoB,CAAC,CAAC;IAClB;IACA,IAAIa,CAAC,GAAG,CAAC,IAAIA,CAAC,IAAI,GAAG,IAAIN,QAAQ,CAACK,MAAM,CAACC,CAAC,CAAC,CAAC,IAAIA,CAAC,EAAE;MAC/C,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf;AACA;AACA;AACA;AACA;AACA,SAASJ,QAAQA,CAACK,KAAK,EAAE;EACrB,IAAIA,KAAK,CAACC,KAAK,KAAKC,SAAS,EAAE;IAC3B,OAAOF,KAAK;EAChB;EACAA,KAAK,CAACC,KAAK,GAAG,MAAM;IAChB,MAAME,IAAI,GAAGrB,KAAK,CAACsB,SAAS,CAACH,KAAK,CAACI,IAAI,CAACC,SAAS,CAAC;IAClD,OAAOX,QAAQ,CAAC,IAAIC,UAAU,CAACd,KAAK,CAACsB,SAAS,CAACH,KAAK,CAACM,KAAK,CAACP,KAAK,EAAEG,IAAI,CAAC,CAAC,CAAC;EAC7E,CAAC;EACD,OAAOH,KAAK;AAChB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}