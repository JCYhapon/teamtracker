{"ast":null,"code":"const alchemyKey = \"wss://eth-sepolia.g.alchemy.com/v2/FI-974hdofERGqCnrGu-doHGCuP1LqHt\";\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require('../contract-abi.json');\nconst contractAddress = '0x8CFeBC7dF90808DFed7258CDD244B1fF56f33eF7';\nexport const contractTeamManagement = new web3.eth.Contract(contractABI, contractAddress);\nexport async function addTeamMember(walletAddress, name) {\n  try {\n    const accounts = await web3.eth.getAccounts();\n    const userAddress = accounts[0];\n    const contract = new web3.eth.Contract(contractABI, contractAddress);\n    await contract.methods.addTeamMember(walletAddress, name).send({\n      from: userAddress\n    });\n\n    // Check if the TaskAssigned event is emitted\n    contract.events.TaskAssigned({\n      filter: {\n        teamMember: walletAddress\n      }\n    }, (error, event) => {\n      if (!error) {\n        console.log(\"Team member added successfully\");\n      } else {\n        console.error(\"Error adding team member:\", error);\n      }\n    });\n  } catch (error) {\n    console.error(\"Error adding team member:\", error);\n  }\n}\nexport async function assignTask(teamMember, taskDescription) {\n  try {\n    const accounts = await web3.eth.getAccounts();\n    const userAddress = accounts[0];\n    await contractTeamManagement.methods.assignTask(teamMember, taskDescription).send({\n      from: userAddress\n    });\n    console.log(\"Task assigned successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"Error assigning task:\", error);\n    return false;\n  }\n}\nexport async function completeTask(teamMember) {\n  try {\n    const accounts = await web3.eth.getAccounts();\n    const userAddress = accounts[0];\n    await contractTeamManagement.methods.completeTask(teamMember).send({\n      from: userAddress\n    });\n    console.log(\"Task completed successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"Error completing task:\", error);\n    return false;\n  }\n}\nexport async function deactivateTeamMember(teamMember) {\n  try {\n    // Get the current user's account address from MetaMask\n    const accounts = await web3.eth.getAccounts();\n    const userAddress = accounts[0];\n\n    // Call the deactivateTeamMember function of the contract\n    await contractTeamManagement.methods.deactivateTeamMember(teamMember).send({\n      from: userAddress\n    });\n    console.log(\"Team member deactivated successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"Error deactivating team member:\", error);\n    return false;\n  }\n}\nexport async function releasePayment(teamMember, amount) {\n  try {\n    const accounts = await web3.eth.getAccounts();\n    const userAddress = accounts[0];\n    await contractTeamManagement.methods.releasePayment(teamMember, amount).send({\n      from: userAddress\n    });\n    console.log(\"Payment released successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"Error releasing payment:\", error);\n    return false;\n  }\n}\n\n// Function to get a team member's details\nasync function getTeamMembers(walletAddress) {\n  try {\n    const teamMember = await contractTeamManagement.methods.teamMembers(walletAddress).call();\n    console.log(\"Wallet Address: \".concat(teamMember.walletAddress));\n    console.log(\"Name: \".concat(teamMember.name));\n    console.log(\"Total Tasks Assigned: \".concat(teamMember.totalTasksAssigned));\n    console.log(\"Total Tasks Completed: \".concat(teamMember.totalTasksCompleted));\n    console.log(\"Is Active: \".concat(teamMember.isActive));\n  } catch (error) {\n    console.error(\"Error fetching team member: \".concat(error));\n  }\n}\n\n// Usage\ngetTeamMember('0x1ca266b1F1bdBD94Cd980BCF611D6dD93BCc5B7f');\nexport async function withdrawBalance() {\n  // Implement withdrawBalance function here\n}","map":{"version":3,"names":["alchemyKey","createAlchemyWeb3","require","web3","contractABI","contractAddress","contractTeamManagement","eth","Contract","addTeamMember","walletAddress","name","accounts","getAccounts","userAddress","contract","methods","send","from","events","TaskAssigned","filter","teamMember","error","event","console","log","assignTask","taskDescription","completeTask","deactivateTeamMember","releasePayment","amount","getTeamMembers","teamMembers","call","concat","totalTasksAssigned","totalTasksCompleted","isActive","getTeamMember","withdrawBalance"],"sources":["E:/4th Year/2nd Semester/BlockChain/starter-files/src/util/interact.js"],"sourcesContent":["const alchemyKey = \"wss://eth-sepolia.g.alchemy.com/v2/FI-974hdofERGqCnrGu-doHGCuP1LqHt\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require('../contract-abi.json');\nconst contractAddress = '0x8CFeBC7dF90808DFed7258CDD244B1fF56f33eF7';\n\n\nexport const contractTeamManagement = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n);\n\nexport async function addTeamMember(walletAddress, name) {\n  try {\n      const accounts = await web3.eth.getAccounts();\n      const userAddress = accounts[0];\n      const contract = new web3.eth.Contract(contractABI, contractAddress);\n      await contract.methods.addTeamMember(walletAddress, name).send({ from: userAddress });\n\n      // Check if the TaskAssigned event is emitted\n      contract.events.TaskAssigned({ filter: { teamMember: walletAddress } }, (error, event) => {\n          if (!error) {\n              console.log(\"Team member added successfully\");\n          } else {\n              console.error(\"Error adding team member:\", error);\n          }\n      });\n  } catch (error) {\n      console.error(\"Error adding team member:\", error);\n  }\n}\n\n\n\nexport async function assignTask(teamMember, taskDescription) {\n  try {\n      const accounts = await web3.eth.getAccounts();\n      const userAddress = accounts[0];\n      await contractTeamManagement.methods.assignTask(teamMember, taskDescription).send({ from: userAddress });\n      console.log(\"Task assigned successfully\");\n      return true;\n  } catch (error) {\n      console.error(\"Error assigning task:\", error);\n      return false;\n  }\n}\n\n\nexport async function completeTask(teamMember) {\n  try {\n      const accounts = await web3.eth.getAccounts();\n      const userAddress = accounts[0];\n      await contractTeamManagement.methods.completeTask(teamMember).send({ from: userAddress });\n      console.log(\"Task completed successfully\");\n      return true;\n  } catch (error) {\n      console.error(\"Error completing task:\", error);\n      return false;\n  }\n}\n\n\nexport async function deactivateTeamMember(teamMember) {\n  try {\n      // Get the current user's account address from MetaMask\n      const accounts = await web3.eth.getAccounts();\n      const userAddress = accounts[0];\n\n      // Call the deactivateTeamMember function of the contract\n      await contractTeamManagement.methods.deactivateTeamMember(teamMember).send({ from: userAddress });\n\n      console.log(\"Team member deactivated successfully\");\n      return true;\n  } catch (error) {\n      console.error(\"Error deactivating team member:\", error);\n      return false;\n  }\n}\n\nexport async function releasePayment(teamMember, amount) {\n  try {\n      const accounts = await web3.eth.getAccounts();\n      const userAddress = accounts[0];\n      await contractTeamManagement.methods.releasePayment(teamMember, amount).send({ from: userAddress });\n      console.log(\"Payment released successfully\");\n      return true;\n  } catch (error) {\n      console.error(\"Error releasing payment:\", error);\n      return false;\n  }\n}\n\n// Function to get a team member's details\nasync function getTeamMembers(walletAddress) {\n    try {\n        const teamMember = await contractTeamManagement.methods.teamMembers(walletAddress).call();\n        console.log(`Wallet Address: ${teamMember.walletAddress}`);\n        console.log(`Name: ${teamMember.name}`);\n        console.log(`Total Tasks Assigned: ${teamMember.totalTasksAssigned}`);\n        console.log(`Total Tasks Completed: ${teamMember.totalTasksCompleted}`);\n        console.log(`Is Active: ${teamMember.isActive}`);\n    } catch (error) {\n        console.error(`Error fetching team member: ${error}`);\n    }\n}\n\n// Usage\ngetTeamMember('0x1ca266b1F1bdBD94Cd980BCF611D6dD93BCc5B7f');\n\n\n\n\n\nexport async function withdrawBalance() {\n    // Implement withdrawBalance function here\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}