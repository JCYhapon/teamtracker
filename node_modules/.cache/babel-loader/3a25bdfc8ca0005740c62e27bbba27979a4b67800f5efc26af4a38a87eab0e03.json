{"ast":null,"code":"const alchemyKey = \"wss://eth-sepolia.g.alchemy.com/v2/FI-974hdofERGqCnrGu-doHGCuP1LqHt\";\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require('../contract-abi.json');\nconst contractAddress = '0x8CFeBC7dF90808DFed7258CDD244B1fF56f33eF7';\nexport const contractTeamManagement = new web3.eth.Contract(contractABI, contractAddress);\nexport async function addTeamMember(walletAddress, name) {\n  try {\n    const accounts = await web3.eth.getAccounts();\n    const userAddress = accounts[0];\n    await contractTeamManagement.methods.addTeamMember(walletAddress, name).send({\n      from: userAddress\n    });\n    console.log(\"Team member added successfully\");\n  } catch (error) {\n    console.error(\"Error adding team member:\", error);\n  }\n}\nexport async function assignTask(teamMember, taskDescription) {\n  // Implement assignTask function here\n}\nexport async function completeTask(teamMember) {\n  // Implement completeTask function here\n}\nexport async function deactivateTeamMember(teamMember) {\n  try {\n    // Get the current user's account address from MetaMask\n    const accounts = await web3.eth.getAccounts();\n    const userAddress = accounts[0];\n\n    // Call the deactivateTeamMember function of the contract\n    await contractInstance.methods.deactivateTeamMember(teamMember).send({\n      from: userAddress\n    });\n    console.log(\"Team member deactivated successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"Error deactivating team member:\", error);\n    return false;\n  }\n}\nexport async function releasePayment(teamMember, amount) {\n  // Implement releasePayment function here\n}\nexport async function getTeamMembers() {\n  try {\n    const teamMembers = await contractTeamManagement.methods.getTeamMembers().call();\n    return teamMembers;\n  } catch (error) {\n    console.error(\"Error getting team members:\", error);\n    return [];\n  }\n}\nexport async function withdrawBalance() {\n  // Implement withdrawBalance function here\n}\nexport async function connectToMetaMask() {\n  // Check if MetaMask is installed\n  if (typeof window.ethereum !== 'undefined') {\n    try {\n      // Request account access if needed\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log('Connected to MetaMask');\n      return true; // Connection successful\n    } catch (error) {\n      console.error('Error connecting to MetaMask:', error);\n      return false; // Connection failed\n    }\n  } else {\n    console.error('MetaMask not detected');\n    return false; // MetaMask not detected\n  }\n}","map":{"version":3,"names":["alchemyKey","createAlchemyWeb3","require","web3","contractABI","contractAddress","contractTeamManagement","eth","Contract","addTeamMember","walletAddress","name","accounts","getAccounts","userAddress","methods","send","from","console","log","error","assignTask","teamMember","taskDescription","completeTask","deactivateTeamMember","contractInstance","releasePayment","amount","getTeamMembers","teamMembers","call","withdrawBalance","connectToMetaMask","window","ethereum","request","method"],"sources":["E:/4th Year/2nd Semester/BlockChain/starter-files/src/util/interact.js"],"sourcesContent":["const alchemyKey = \"wss://eth-sepolia.g.alchemy.com/v2/FI-974hdofERGqCnrGu-doHGCuP1LqHt\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require('../contract-abi.json');\nconst contractAddress = '0x8CFeBC7dF90808DFed7258CDD244B1fF56f33eF7';\n\n\nexport const contractTeamManagement = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n);\n\nexport async function addTeamMember(walletAddress, name) {\n    try {\n        const accounts = await web3.eth.getAccounts();\n        const userAddress = accounts[0];\n        await contractTeamManagement.methods.addTeamMember(walletAddress, name).send({ from: userAddress });\n        console.log(\"Team member added successfully\");\n    } catch (error) {\n        console.error(\"Error adding team member:\", error);\n    }\n}\n\n\nexport async function assignTask(teamMember, taskDescription) {\n    // Implement assignTask function here\n}\n\nexport async function completeTask(teamMember) {\n    // Implement completeTask function here\n}\n\nexport async function deactivateTeamMember(teamMember) {\n  try {\n      // Get the current user's account address from MetaMask\n      const accounts = await web3.eth.getAccounts();\n      const userAddress = accounts[0];\n\n      // Call the deactivateTeamMember function of the contract\n      await contractInstance.methods.deactivateTeamMember(teamMember).send({ from: userAddress });\n\n      console.log(\"Team member deactivated successfully\");\n      return true;\n  } catch (error) {\n      console.error(\"Error deactivating team member:\", error);\n      return false;\n  }\n}\n\nexport async function releasePayment(teamMember, amount) {\n    // Implement releasePayment function here\n}\n\nexport async function getTeamMembers() {\n    try {\n        const teamMembers = await contractTeamManagement.methods.getTeamMembers().call();\n        return teamMembers;\n    } catch (error) {\n        console.error(\"Error getting team members:\", error);\n        return [];\n    }\n}\n\nexport async function withdrawBalance() {\n    // Implement withdrawBalance function here\n}\n\nexport async function connectToMetaMask() {\n  // Check if MetaMask is installed\n  if (typeof window.ethereum !== 'undefined') {\n    try {\n      // Request account access if needed\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      console.log('Connected to MetaMask');\n      return true; // Connection successful\n    } catch (error) {\n      console.error('Error connecting to MetaMask:', error);\n      return false; // Connection failed\n    }\n  } else {\n    console.error('MetaMask not detected');\n    return false; // MetaMask not detected\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}