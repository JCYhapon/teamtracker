{"ast":null,"code":"var _jsxFileName = \"E:\\\\4th Year\\\\2nd Semester\\\\BlockChain\\\\starter-files\\\\src\\\\HelloWorld.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { helloWorldContract, connectWallet, updateMessage, loadCurrentMessage, getCurrentWalletConnected } from \"./util/interact.js\";\nimport alchemylogo from \"./alchemylogo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HelloWorld = () => {\n  _s();\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(async () => {\n    async function fetchMessage() {\n      const message = await loadCurrentMessage();\n      setMessage(message);\n    }\n    fetchMessage();\n    addSmartContractListener();\n    async function fetchWallet() {\n      const {\n        address,\n        status\n      } = await getCurrentWalletConnected();\n      setWallet(address);\n      setStatus(status);\n    }\n    fetchMessage();\n  }, []);\n  function addSmartContractListener() {\n    helloWorldContract.events.updateMessage({}, (error, data) => {\n      if (error) {\n        setStatus(\"ðŸ˜¢\" + error.message); // Emoticon for error\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"ðŸŽ‰ Yehey! Your Message has been updated\"); // Emoticon for success\n      }\n    });\n  }\n  function addWalletListener() {\n    //TODO: implement\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"ðŸ‘† Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"ðŸ¦Š Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: \"https://metamask.io/download\",\n          children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this));\n    }\n  }\n  const connectWalletPressed = async () => {\n    //TODO: implement\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n  const onUpdatePressed = async () => {//TODO: implement\n  };\n\n  //the UI of our component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"logo\",\n      src: alchemylogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"walletButton\",\n      onClick: connectWalletPressed,\n      children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        paddingTop: \"50px\"\n      },\n      children: \"Current Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        paddingTop: \"18px\"\n      },\n      children: \"New Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Update the message in your smart contract.\",\n        onChange: e => setNewMessage(e.target.value),\n        value: newMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"publish\",\n        onClick: onUpdatePressed,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(HelloWorld, \"Gq/QBHQMC3uFvf9JJRa28vw0vHw=\");\n_c = HelloWorld;\nexport default HelloWorld;\nvar _c;\n$RefreshReg$(_c, \"HelloWorld\");","map":{"version":3,"names":["React","useEffect","useState","helloWorldContract","connectWallet","updateMessage","loadCurrentMessage","getCurrentWalletConnected","alchemylogo","jsxDEV","_jsxDEV","HelloWorld","_s","walletAddress","setWallet","status","setStatus","message","setMessage","newMessage","setNewMessage","fetchMessage","addSmartContractListener","fetchWallet","address","events","error","data","returnValues","addWalletListener","window","ethereum","on","accounts","length","children","target","href","fileName","_jsxFileName","lineNumber","columnNumber","connectWalletPressed","walletResponse","onUpdatePressed","id","src","onClick","String","substring","style","paddingTop","type","placeholder","onChange","e","value","_c","$RefreshReg$"],"sources":["E:/4th Year/2nd Semester/BlockChain/starter-files/src/HelloWorld.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  helloWorldContract,\n  connectWallet,\n  updateMessage,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n} from \"./util/interact.js\";\n\nimport alchemylogo from \"./alchemylogo.svg\";\n\nconst HelloWorld = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(async () => {\n    async function fetchMessage() {\n      const message = await loadCurrentMessage();\n      setMessage(message);\n    }\n    fetchMessage();\n    addSmartContractListener();\n\n    async function fetchWallet() {\n      const {address, status} = await getCurrentWalletConnected();\n      setWallet(address);\n      setStatus(status);\n    }\n    fetchMessage();\n  }, []);\n\n  function addSmartContractListener() {\n    helloWorldContract.events.updateMessage({}, (error, data) => {\n      if (error) {\n        setStatus(\"ðŸ˜¢\" + error.message); // Emoticon for error\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"ðŸŽ‰ Yehey! Your Message has been updated\"); // Emoticon for success\n      }\n    })\n  }\n  \n\n  function addWalletListener() { //TODO: implement\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"ðŸ‘† Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"ðŸ¦Š Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          ðŸ¦Š{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download`}>You must install Metamask, a virtual Ethereum wallet, in your browser.</a>\n        </p>\n      );\n    }\n  }\n\n  const connectWalletPressed = async () => { //TODO: implement\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onUpdatePressed = async () => { //TODO: implement\n    \n  };\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n      <img id=\"logo\" src={alchemylogo}></img>\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\n      <p>{message}</p>\n\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Update the message in your smart contract.\"\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n        <p id=\"status\">{status}</p>\n\n        <button id=\"publish\" onClick={onUpdatePressed}>\n          Update\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default HelloWorld;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}