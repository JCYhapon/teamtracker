{"ast":null,"code":"var _jsxFileName = \"E:\\\\4th Year\\\\2nd Semester\\\\BlockChain\\\\starter-files\\\\src\\\\util\\\\interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst alchemyKey = \"wss://eth-sepolia.g.alchemy.com/v2/ILI-RxKQ1Ij2yE2bvm5ELkDDRgKdsPLH\";\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require('../contract-abi.json');\nconst contractAddress = '0xD7b942a91521d46a9D1E584ADD1100dEb0e6D5d0';\nexport const helloWorldContract = new web3.eth.Contract(contractABI, contractAddress);\nexport const loadCurrentMessage = async () => {\n  const message = await helloWorldContract.methods.message().call();\n  return message;\n};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😞\" + err.message // Added sad face\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: \"https://metamask.io/download.html\",\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😢 \" + err.message // Added sad crying emoji\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: \"https://metamask.io/download\",\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};\nexport const updateMessage = async (address, message) => {\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"Connect your Metamask wallet to update the message on the Blockchain.\"\n    };\n  }\n  if (message.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string!\"\n    };\n  }\n\n  // Set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress,\n    from: address,\n    data: helloWorldContract.methods.update(message).encodeABI()\n  };\n\n  // Sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705 \", \"\", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: \"https://sepolia.etherscan.io/tx/\".concat(txHash),\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), \"\\u2139\\uFE0F Once the transaction is verified by the network, the message will be updated automatically.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    };\n  } catch (error) {\n    return {\n      status: \"😢 \" + error.message\n    };\n  }\n};","map":{"version":3,"names":["alchemyKey","createAlchemyWeb3","require","web3","contractABI","contractAddress","helloWorldContract","eth","Contract","loadCurrentMessage","message","methods","call","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","_jsxDEV","children","target","href","fileName","_jsxFileName","lineNumber","columnNumber","getCurrentWalletConnected","length","updateMessage","trim","transactionParameters","to","from","data","update","encodeABI","txHash","params","concat","error"],"sources":["E:/4th Year/2nd Semester/BlockChain/starter-files/src/util/interact.js"],"sourcesContent":["const alchemyKey = \"wss://eth-sepolia.g.alchemy.com/v2/ILI-RxKQ1Ij2yE2bvm5ELkDDRgKdsPLH\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require('../contract-abi.json');\nconst contractAddress = '0xD7b942a91521d46a9D1E584ADD1100dEb0e6D5d0';\n\nexport const helloWorldContract = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n);\n\nexport const loadCurrentMessage = async () => { \n  const message = await helloWorldContract.methods.message().call();\n  return message;\n};\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😞\" + err.message, // Added sad face\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"} {/* Added fox */}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({ \n        method: \"eth_accounts\"\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😢 \" + err.message // Added sad crying emoji\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"} {/* Added fox emoji */}\n            <a target=\"_blank\" href=\"https://metamask.io/download\">You must install Metamask, a virtual Ethereum wallet, in your browser.</a>\n          </p>\n        </span>\n      )\n    };\n  }\n};\n\n\n\nexport const updateMessage = async (address, message) => {\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"Connect your Metamask wallet to update the message on the Blockchain.\",\n    };\n  }\n  \n  if (message.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string!\",\n    };\n  }\n  \n  // Set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress,\n    from: address,\n    data: helloWorldContract.methods.update(message).encodeABI(),\n  };\n\n  // Sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status: (\n        <span>\n          ✅ {\"\"}\n          <a target=\"_blank\" href={`https://sepolia.etherscan.io/tx/${txHash}`}>View the status of your transaction on Etherscan!</a>\n          <br />\n          ℹ️ Once the transaction is verified by the network, the message will be updated automatically.\n        </span>\n      ),\n    };\n  } catch (error) {\n    return {\n      status: \"😢 \" + error.message,\n    };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}